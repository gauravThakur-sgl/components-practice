import React, { useState } from 'react';

// Tabs Component
export const Tabs = ({ tabs, className, ...props }) => {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <div className={`${className || ''}`} {...props}>
      <div className="flex border-b">
        {tabs.map((tab, index) => (
          <button
            key={index}
            className={`py-2 px-4 ${activeTab === index ? 'border-b-2 border-blue-500' : ''}`}
            onClick={() => setActiveTab(index)}
          >
            {tab.label}
          </button>
        ))}
      </div>
      <div className="py-4">{tabs[activeTab].content}</div>
    </div>
  );
};

// Popover Component (simplified)
export const Popover = ({ trigger, content, className, ...props }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative inline-block">
      <div onClick={() => setIsOpen(!isOpen)}>{trigger}</div>
      {isOpen && (
        <div className={`absolute z-10 mt-2 p-4 bg-white border rounded shadow-lg ${className || ''}`} {...props}>
          {content}
        </div>
      )}
    </div>
  );
};

// Checkbox Component
export const Checkbox = ({ label, checked, onChange, className, ...props }) => {
  return (
    <label className={`inline-flex items-center ${className || ''}`} {...props}>
      <input
        type="checkbox"
        className="form-checkbox h-5 w-5 text-blue-600"
        checked={checked}
        onChange={onChange}
      />
      <span className="ml-2">{label}</span>
    </label>
  );
};

// Radio Component
export const Radio = ({ label, checked, onChange, name, value, className, ...props }) => {
  return (
    <label className={`inline-flex items-center ${className || ''}`} {...props}>
      <input
        type="radio"
        className="form-radio h-5 w-5 text-blue-600"
        checked={checked}
        onChange={onChange}
        name={name}
        value={value}
      />
      <span className="ml-2">{label}</span>
    </label>
  );
};

// Accordion Component (simplified)
export const Accordion = ({ items, className, ...props }) => {
  const [openIndex, setOpenIndex] = useState(null);

  return (
    <div className={`border rounded ${className || ''}`} {...props}>
      {items.map((item, index) => (
        <div key={index} className="border-b last:border-b-0">
          <button
            className="w-full p-4 text-left font-medium"
            onClick={() => setOpenIndex(openIndex === index ? null : index)}
          >
            {item.title}
          </button>
          {openIndex === index && <div className="p-4">{item.content}</div>}
        </div>
      ))}
    </div>
  );
};

// Date Picker Component (very simplified, consider using a library for production)
export const DatePicker = ({ onChange, className, ...props }) => {
  return (
    <input
      type="date"
      onChange={(e) => onChange(e.target.value)}
      className={`p-2 border rounded ${className || ''}`}
      {...props}
    />
  );
};

// Progress Component
export const Progress = ({ value, max = 100, className, ...props }) => {
  return (
    <div className={`w-full bg-gray-200 rounded-full h-2.5 ${className || ''}`} {...props}>
      <div
        className="bg-blue-600 h-2.5 rounded-full"
        style={{ width: `${(value / max) * 100}%` }}
      ></div>
    </div>
  );
};



// Toggle Switch
import React, { useState } from 'react';

const ToggleSwitch = () => {
  const [isChecked, setIsChecked] = useState(false);

  const handleToggle = () => {
    setIsChecked(!isChecked);
  };

  return (
    <div className="relative inline-flex items-center">
      <input
        type="checkbox"
        className="sr-only"
        checked={isChecked}
        onChange={handleToggle}
      />
      <div
        className={`h-6 w-11 bg-gray-300 rounded-full transition-all duration-200 ${
          isChecked ? 'bg-blue-500' : ''
        }`}
      >
        <div
          className={`absolute h-4 w-4 rounded-full bg-white transition-all duration-200 ${
            isChecked ? 'translate-x-6' : 'translate-x-1'
          }`}
        ></div>
      </div>
    </div>
  );
};

export default ToggleSwitch;